{"version":3,"sources":["PercentageChange.js","Thesaurus.js","App.js","serviceWorker.js","index.js"],"names":["PercentageChange","props","handleChange","event","target","name","setState","initPrice","value","finalPrice","calculate","result","equation","v1","parseFloat","state","v2","Math","abs","toFixed","change","formula","preventDefault","Container","component","maxWidth","CssBaseline","Typography","variant","onSubmit","this","TextField","onChange","margin","required","fullWidth","id","label","autoComplete","autoFocus","type","Button","color","Provider","Node","inline","React","Component","Thesaurus","word","findSynonym","synonyms","a","fetch","response","json","i","data","j","newSynonyms","push","map","key","App","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f91d9820.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MathJax from \"react-mathjax\";\r\n\r\nclass PercentageChange extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      initPrice: \"\",\r\n      finalPrice: \"\",\r\n      formula: \"\",\r\n      change: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange = event => {\r\n    if (event.target.name === \"initPrice\") {\r\n      this.setState({ initPrice: event.target.value });\r\n    } else {\r\n      this.setState({ finalPrice: event.target.value });\r\n    }\r\n  };\r\n\r\n  calculate = event => {\r\n    const v1 = parseFloat(this.state.initPrice);\r\n    const v2 = parseFloat(this.state.finalPrice);\r\n    let result;\r\n    let equation;\r\n    if (v1 > v2) {\r\n      result = ((v1 - v2) / Math.abs(v1)) * 100;\r\n      result = result.toFixed(2) + \"% decrease\";\r\n      equation = `\\\\frac{${v1} - ${v2}}{${Math.abs(v1)}} * 100`;\r\n    } else if (v1 < v2) {\r\n      result = ((v2 - v1) / Math.abs(v1)) * 100;\r\n      result = result.toFixed(2) + \"% increase\";\r\n      equation = `\\\\frac{${v2} - ${v1}}{${Math.abs(v1)}} * 100`;\r\n    } else if (v1 === v2) {\r\n      result = ((v1 - v2) / Math.abs(v1)) * 100;\r\n      result = result.toFixed(2) + \"% decrease\";\r\n      equation = `\\\\frac{${v1} - ${v2}}{${Math.abs(v1)}} * 100`;\r\n      result = \"0% change\";\r\n    }\r\n    this.setState({ change: result, formula: equation });\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n          %Change\r\n        </Typography>\r\n        <form onSubmit={this.calculate}>\r\n          <TextField\r\n            value={this.state.initPrice}\r\n            onChange={this.handleChange}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"initPrice\"\r\n            label=\"Initial Price\"\r\n            name=\"initPrice\"\r\n            autoComplete=\"initPrice\"\r\n            autoFocus\r\n          />\r\n          <TextField\r\n            value={this.state.finalPrice}\r\n            onChange={this.handleChange}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"finalPrice\"\r\n            label=\"Final Price\"\r\n            type=\"finalPrice\"\r\n            id=\"finalPrice\"\r\n            autoComplete=\"finalPrice\"\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n            Calculate\r\n          </Button>\r\n        </form>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          <MathJax.Provider>\r\n            <div>\r\n              <MathJax.Node inline formula={this.state.formula} />\r\n            </div>\r\n          </MathJax.Provider>\r\n        </Typography>\r\n        <Typography component=\"h1\" variant=\"h3\">\r\n          {this.state.change}\r\n        </Typography>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PercentageChange;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass Thesaurus extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      word: \"\",\r\n      synonyms: []\r\n    };\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({ word: event.target.value });\r\n  };\r\n\r\n  // using MERRIAM-WEBSTER API\r\n  // dictionary key 8869e4dc-d677-4abb-8712-74c7f90a2116\r\n  // theasurus key 862e489f-c41f-4b0a-bdee-fd6ae20eeb16\r\n  findSynonym = event => {\r\n    this.setState({ synonyms: [] });\r\n    (async () => {\r\n      const response = await fetch(\r\n        `https://www.dictionaryapi.com/api/v3/references/thesaurus/json/${this.state.word}?key=862e489f-c41f-4b0a-bdee-fd6ae20eeb16`\r\n      );\r\n      const data = await response.json();\r\n      for (let i in data) {\r\n        for (let j in data[i][\"meta\"][\"syns\"][0]) {\r\n          const newSynonyms = this.state.synonyms;\r\n          newSynonyms.push(data[i][\"meta\"][\"syns\"][0][j]);\r\n          this.setState({\r\n            synonyms: newSynonyms\r\n          });\r\n        }\r\n      }\r\n    })();\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n          Thesaurus\r\n        </Typography>\r\n        <form onSubmit={this.findSynonym}>\r\n          <TextField\r\n            value={this.state.word}\r\n            onChange={this.handleChange}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"word\"\r\n            label=\"Word\"\r\n            name=\"word\"\r\n            autoComplete=\"word\"\r\n          />\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n            Synonyms\r\n          </Button>\r\n        </form>\r\n        {this.state.synonyms.map(word => (\r\n          <Typography component=\"h1\" variant=\"h5\" key={word}>\r\n            {word}\r\n          </Typography>\r\n        ))}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Thesaurus;\r\n","import React from \"react\";\nimport PercentageChange from \"./PercentageChange\";\nimport Thesaurus from \"./Thesaurus\";\nimport Flexbox from \"flexbox-react\";\n\nfunction App() {\n  return (\n    <Flexbox flexDirection=\"row\">\n      <PercentageChange></PercentageChange>\n      <Thesaurus></Thesaurus>\n    </Flexbox>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}