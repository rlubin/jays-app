{"version":3,"sources":["PercentageChange.js","App.js","serviceWorker.js","index.js"],"names":["PercentageChange","props","handleChange","event","console","log","state","target","name","setState","initPrice","value","finalPrice","change","result","i","parseFloat","this","f","Container","component","maxWidth","CssBaseline","Typography","variant","noValidate","TextField","onChange","margin","required","fullWidth","id","label","autoComplete","autoFocus","type","Button","calculate","color","Box","mt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAmGeA,E,YAzFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,aAAe,SAAAC,GACbC,QAAQC,IAAI,EAAKC,OACS,cAAtBH,EAAMI,OAAOC,KACf,EAAKC,SAAS,CAAEC,UAAWP,EAAMI,OAAOI,QAExC,EAAKF,SAAS,CAAEG,WAAYT,EAAMI,OAAOI,SAZ3C,EAAKL,MAAQ,CACXI,UAAW,EACXE,WAAY,GACZC,OAAQ,GALO,E,yEAmBjB,IAEIC,EAFEC,EAAIC,WAAWC,KAAKX,MAAMI,WAC1BQ,EAAIF,WAAWC,KAAKX,MAAMM,YAE5BG,EAAIG,EAENJ,GADeI,EAAIH,GACEA,EAAK,IAG1BD,GADeC,EAAIG,GACEH,EAAK,IAE5BE,KAAKR,SAAS,CAAEI,OAAQC,IACxBV,QAAQC,IAAIY,KAAKX,S,+BAIjB,OACE,kBAACa,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACnC,kBAACC,EAAA,EAAD,MACA,6BAEE,kBAACC,EAAA,EAAD,CAAYH,UAAU,KAAKI,QAAQ,MAAnC,yBAGA,0BAAMC,YAAU,GACd,kBAACC,EAAA,EAAD,CACEf,MAAOM,KAAKX,MAAMI,UAClBiB,SAAUV,KAAKf,aACfsB,QAAQ,WACRI,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTC,GAAG,YACHC,MAAM,gBACNxB,KAAK,YACLyB,aAAa,YACbC,WAAS,IAEX,kBAACR,EAAA,EAAD,CACEf,MAAOM,KAAKX,MAAMM,WAClBe,SAAUV,KAAKf,aACfsB,QAAQ,WACRI,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTtB,KAAK,aACLwB,MAAM,cACNG,KAAK,aACLJ,GAAG,aACHE,aAAa,eAEf,kBAACG,EAAA,EAAD,CACED,KAAK,SACLL,WAAS,EACTH,SAAUV,KAAKoB,UACfb,QAAQ,YACRc,MAAM,WALR,eAWJ,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACjB,EAAA,EAAD,CAAYH,UAAU,KAAKI,QAAQ,MAChCP,KAAKX,MAAMO,OADd,W,GAlFuB4B,IAAMC,WCFtBC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7685bcdf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n// import NumberFormat from \"react-number-format\";\r\n\r\nclass PercentageChange extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      initPrice: 1,\r\n      finalPrice: 10,\r\n      change: 0\r\n    };\r\n  }\r\n\r\n  handleChange = event => {\r\n    console.log(this.state);\r\n    if (event.target.name === \"initPrice\") {\r\n      this.setState({ initPrice: event.target.value });\r\n    } else {\r\n      this.setState({ finalPrice: event.target.value });\r\n    }\r\n  };\r\n\r\n  calculate() {\r\n    const i = parseFloat(this.state.initPrice);\r\n    const f = parseFloat(this.state.finalPrice);\r\n    let result;\r\n    if (i < f) {\r\n      let increase = f - i;\r\n      result = (increase / i) * 100;\r\n    } else {\r\n      let decrease = i - f;\r\n      result = (decrease / i) * 100;\r\n    }\r\n    this.setState({ change: result });\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div>\r\n          {/* <NumberFormat thousandSeparator={true} prefix={\"$\"} /> */}\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Percentage Difference\r\n          </Typography>\r\n          <form noValidate>\r\n            <TextField\r\n              value={this.state.initPrice}\r\n              onChange={this.handleChange}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"initPrice\"\r\n              label=\"Initial Price\"\r\n              name=\"initPrice\"\r\n              autoComplete=\"initPrice\"\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              value={this.state.finalPrice}\r\n              onChange={this.handleChange}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"finalPrice\"\r\n              label=\"Final Price\"\r\n              type=\"finalPrice\"\r\n              id=\"finalPrice\"\r\n              autoComplete=\"finalPrice\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              onChange={this.calculate}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Calculate\r\n            </Button>\r\n          </form>\r\n        </div>\r\n        <Box mt={8}></Box>\r\n        <Typography component=\"h1\" variant=\"h1\">\r\n          {this.state.change} %\r\n        </Typography>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PercentageChange;\r\n","import React from \"react\";\nimport PercentageChange from \"./PercentageChange\";\n\nfunction App() {\n  return <PercentageChange></PercentageChange>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}